// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: Copyright 2025 Carabiner Systems, Inc

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: osv.proto

package osv

import (
	v1_6_7 "github.com/carabiner-dev/osv/go/osv/v1_6_7"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Results describes the OSV scanner format output
type Results struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Results       []*Result              `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"` // google.protobuf.Struct experimental_config = 3;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Results) Reset() {
	*x = Results{}
	mi := &file_osv_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Results) ProtoMessage() {}

func (x *Results) ProtoReflect() protoreflect.Message {
	mi := &file_osv_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Results.ProtoReflect.Descriptor instead.
func (*Results) Descriptor() ([]byte, []int) {
	return file_osv_proto_rawDescGZIP(), []int{0}
}

func (x *Results) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Results) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *Result_Source         `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Packages      []*Result_Package      `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_osv_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_osv_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_osv_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetSource() *Result_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Result) GetPackages() []*Result_Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

type Result_Package struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Package         *Result_Package_Info    `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	Vulnerabilities []*v1_6_7.Record        `protobuf:"bytes,2,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	Groups          []*Result_Package_Group `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Result_Package) Reset() {
	*x = Result_Package{}
	mi := &file_osv_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result_Package) ProtoMessage() {}

func (x *Result_Package) ProtoReflect() protoreflect.Message {
	mi := &file_osv_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result_Package.ProtoReflect.Descriptor instead.
func (*Result_Package) Descriptor() ([]byte, []int) {
	return file_osv_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Result_Package) GetPackage() *Result_Package_Info {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *Result_Package) GetVulnerabilities() []*v1_6_7.Record {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *Result_Package) GetGroups() []*Result_Package_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Result_Source struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result_Source) Reset() {
	*x = Result_Source{}
	mi := &file_osv_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result_Source) ProtoMessage() {}

func (x *Result_Source) ProtoReflect() protoreflect.Message {
	mi := &file_osv_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result_Source.ProtoReflect.Descriptor instead.
func (*Result_Source) Descriptor() ([]byte, []int) {
	return file_osv_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Result_Source) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Result_Source) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Result_Package_Info struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Ecosystem     string                 `protobuf:"bytes,3,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result_Package_Info) Reset() {
	*x = Result_Package_Info{}
	mi := &file_osv_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result_Package_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result_Package_Info) ProtoMessage() {}

func (x *Result_Package_Info) ProtoReflect() protoreflect.Message {
	mi := &file_osv_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result_Package_Info.ProtoReflect.Descriptor instead.
func (*Result_Package_Info) Descriptor() ([]byte, []int) {
	return file_osv_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Result_Package_Info) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Result_Package_Info) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Result_Package_Info) GetEcosystem() string {
	if x != nil {
		return x.Ecosystem
	}
	return ""
}

type Result_Package_Group struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Ids                  []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Aliases              []string               `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
	MaxSeverity          string                 `protobuf:"bytes,3,opt,name=max_severity,json=maxSeverity,proto3" json:"max_severity,omitempty"`
	ExperimentalAnalysis *structpb.Struct       `protobuf:"bytes,4,opt,name=experimentalAnalysis,proto3" json:"experimentalAnalysis,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Result_Package_Group) Reset() {
	*x = Result_Package_Group{}
	mi := &file_osv_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result_Package_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result_Package_Group) ProtoMessage() {}

func (x *Result_Package_Group) ProtoReflect() protoreflect.Message {
	mi := &file_osv_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result_Package_Group.ProtoReflect.Descriptor instead.
func (*Result_Package_Group) Descriptor() ([]byte, []int) {
	return file_osv_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *Result_Package_Group) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Result_Package_Group) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Result_Package_Group) GetMaxSeverity() string {
	if x != nil {
		return x.MaxSeverity
	}
	return ""
}

func (x *Result_Package_Group) GetExperimentalAnalysis() *structpb.Struct {
	if x != nil {
		return x.ExperimentalAnalysis
	}
	return nil
}

var File_osv_proto protoreflect.FileDescriptor

var file_osv_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6f, 0x73, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6f, 0x73, 0x76,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x76, 0x31, 0x2e, 0x36, 0x2e, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x73, 0x76, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0xc2, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x73, 0x76,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x73, 0x76, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xa8, 0x03, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x73, 0x76, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x73, 0x76, 0x2e, 0x76, 0x31, 0x5f, 0x36, 0x5f, 0x37, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x73, 0x76, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x52, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0xa3, 0x01, 0x0a,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x14, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x1a, 0x30, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x64, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x73, 0x76, 0x42,
	0x08, 0x4f, 0x73, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x65,
	0x72, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x6f, 0x73, 0x76, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x73, 0x76,
	0xa2, 0x02, 0x03, 0x4f, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x4f, 0x73, 0x76, 0xca, 0x02, 0x03, 0x4f,
	0x73, 0x76, 0xe2, 0x02, 0x0f, 0x4f, 0x73, 0x76, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x4f, 0x73, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_osv_proto_rawDescOnce sync.Once
	file_osv_proto_rawDescData = file_osv_proto_rawDesc
)

func file_osv_proto_rawDescGZIP() []byte {
	file_osv_proto_rawDescOnce.Do(func() {
		file_osv_proto_rawDescData = protoimpl.X.CompressGZIP(file_osv_proto_rawDescData)
	})
	return file_osv_proto_rawDescData
}

var file_osv_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_osv_proto_goTypes = []any{
	(*Results)(nil),               // 0: osv.Results
	(*Result)(nil),                // 1: osv.Result
	(*Result_Package)(nil),        // 2: osv.Result.Package
	(*Result_Source)(nil),         // 3: osv.Result.Source
	(*Result_Package_Info)(nil),   // 4: osv.Result.Package.Info
	(*Result_Package_Group)(nil),  // 5: osv.Result.Package.Group
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*v1_6_7.Record)(nil),         // 7: osv.v1_6_7.Record
	(*structpb.Struct)(nil),       // 8: google.protobuf.Struct
}
var file_osv_proto_depIdxs = []int32{
	6, // 0: osv.Results.date:type_name -> google.protobuf.Timestamp
	1, // 1: osv.Results.results:type_name -> osv.Result
	3, // 2: osv.Result.source:type_name -> osv.Result.Source
	2, // 3: osv.Result.packages:type_name -> osv.Result.Package
	4, // 4: osv.Result.Package.package:type_name -> osv.Result.Package.Info
	7, // 5: osv.Result.Package.vulnerabilities:type_name -> osv.v1_6_7.Record
	5, // 6: osv.Result.Package.groups:type_name -> osv.Result.Package.Group
	8, // 7: osv.Result.Package.Group.experimentalAnalysis:type_name -> google.protobuf.Struct
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_osv_proto_init() }
func file_osv_proto_init() {
	if File_osv_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_osv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_osv_proto_goTypes,
		DependencyIndexes: file_osv_proto_depIdxs,
		MessageInfos:      file_osv_proto_msgTypes,
	}.Build()
	File_osv_proto = out.File
	file_osv_proto_rawDesc = nil
	file_osv_proto_goTypes = nil
	file_osv_proto_depIdxs = nil
}
